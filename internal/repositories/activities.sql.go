// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: activities.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    user_id, 
    distance,
    activity_name,
		avg_speed,
		max_speed,
		elapsed_time,
		total_time
) VALUES (
    $1, 
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
RETURNING id, created_at, user_id, distance, activity_name, avg_speed, max_speed, elapsed_time, total_time
`

type CreateActivityParams struct {
	UserID       pgtype.UUID
	Distance     pgtype.Numeric
	ActivityName string
	AvgSpeed     pgtype.Numeric
	MaxSpeed     pgtype.Numeric
	ElapsedTime  pgtype.Time
	TotalTime    pgtype.Time
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRow(ctx, createActivity,
		arg.UserID,
		arg.Distance,
		arg.ActivityName,
		arg.AvgSpeed,
		arg.MaxSpeed,
		arg.ElapsedTime,
		arg.TotalTime,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Distance,
		&i.ActivityName,
		&i.AvgSpeed,
		&i.MaxSpeed,
		&i.ElapsedTime,
		&i.TotalTime,
	)
	return i, err
}

const getActivities = `-- name: GetActivities :many
SELECT id, created_at, user_id, distance, activity_name, avg_speed, max_speed, elapsed_time, total_time FROM activities
`

func (q *Queries) GetActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.Query(ctx, getActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Distance,
			&i.ActivityName,
			&i.AvgSpeed,
			&i.MaxSpeed,
			&i.ElapsedTime,
			&i.TotalTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivity = `-- name: GetActivity :one
SELECT id, created_at, user_id, distance, activity_name, avg_speed, max_speed, elapsed_time, total_time FROM activities 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActivity(ctx context.Context, id int32) (Activity, error) {
	row := q.db.QueryRow(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Distance,
		&i.ActivityName,
		&i.AvgSpeed,
		&i.MaxSpeed,
		&i.ElapsedTime,
		&i.TotalTime,
	)
	return i, err
}

const getActivityAndRecords = `-- name: GetActivityAndRecords :one
SELECT  a.id, a.created_at, a.user_id, a.distance, a.activity_name, a.avg_speed, a.max_speed, a.elapsed_time, a.total_time,
        TO_CHAR(elapsed_time, 'HH24:MI:SS') as elapsed_time_char,
        TO_CHAR(total_time, 'HH24:MI:SS') as total_time_char,
        JSON_AGG(r) as records
        -- sqlc.embed(r) as records
FROM activities a
    JOIN records r ON a.id = r.activity_id
    WHERE activities.id = $1
`

type GetActivityAndRecordsRow struct {
	ID              int32
	CreatedAt       pgtype.Timestamptz
	UserID          pgtype.UUID
	Distance        pgtype.Numeric
	ActivityName    string
	AvgSpeed        pgtype.Numeric
	MaxSpeed        pgtype.Numeric
	ElapsedTime     pgtype.Time
	TotalTime       pgtype.Time
	ElapsedTimeChar string
	TotalTimeChar   string
	Records         []byte
}

func (q *Queries) GetActivityAndRecords(ctx context.Context, id int32) (GetActivityAndRecordsRow, error) {
	row := q.db.QueryRow(ctx, getActivityAndRecords, id)
	var i GetActivityAndRecordsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Distance,
		&i.ActivityName,
		&i.AvgSpeed,
		&i.MaxSpeed,
		&i.ElapsedTime,
		&i.TotalTime,
		&i.ElapsedTimeChar,
		&i.TotalTimeChar,
		&i.Records,
	)
	return i, err
}
