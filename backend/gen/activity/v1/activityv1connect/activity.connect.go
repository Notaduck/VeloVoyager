// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: activity/v1/activity.proto

package activityv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/notaduck/backend/gen/activity/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ActivityServiceName is the fully-qualified name of the ActivityService service.
	ActivityServiceName = "activity.v1.ActivityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ActivityServiceGetActivitiesProcedure is the fully-qualified name of the ActivityService's
	// GetActivities RPC.
	ActivityServiceGetActivitiesProcedure = "/activity.v1.ActivityService/GetActivities"
	// ActivityServiceGetActivityProcedure is the fully-qualified name of the ActivityService's
	// GetActivity RPC.
	ActivityServiceGetActivityProcedure = "/activity.v1.ActivityService/GetActivity"
	// ActivityServiceUploadActivitiesProcedure is the fully-qualified name of the ActivityService's
	// UploadActivities RPC.
	ActivityServiceUploadActivitiesProcedure = "/activity.v1.ActivityService/UploadActivities"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	activityServiceServiceDescriptor                = v1.File_activity_v1_activity_proto.Services().ByName("ActivityService")
	activityServiceGetActivitiesMethodDescriptor    = activityServiceServiceDescriptor.Methods().ByName("GetActivities")
	activityServiceGetActivityMethodDescriptor      = activityServiceServiceDescriptor.Methods().ByName("GetActivity")
	activityServiceUploadActivitiesMethodDescriptor = activityServiceServiceDescriptor.Methods().ByName("UploadActivities")
)

// ActivityServiceClient is a client for the activity.v1.ActivityService service.
type ActivityServiceClient interface {
	// Fetch all activities without records.
	GetActivities(context.Context, *connect.Request[v1.GetActivitiesRequest]) (*connect.Response[v1.GetActivitiesResponse], error)
	// Fetch a single activity by ID with records.
	GetActivity(context.Context, *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.GetActivityResponse], error)
	// Upload multiple fit files
	UploadActivities(context.Context) *connect.ClientStreamForClient[v1.UploadActivitiesRequest, v1.UploadActivitiesResponse]
}

// NewActivityServiceClient constructs a client for the activity.v1.ActivityService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewActivityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ActivityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &activityServiceClient{
		getActivities: connect.NewClient[v1.GetActivitiesRequest, v1.GetActivitiesResponse](
			httpClient,
			baseURL+ActivityServiceGetActivitiesProcedure,
			connect.WithSchema(activityServiceGetActivitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActivity: connect.NewClient[v1.GetActivityRequest, v1.GetActivityResponse](
			httpClient,
			baseURL+ActivityServiceGetActivityProcedure,
			connect.WithSchema(activityServiceGetActivityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadActivities: connect.NewClient[v1.UploadActivitiesRequest, v1.UploadActivitiesResponse](
			httpClient,
			baseURL+ActivityServiceUploadActivitiesProcedure,
			connect.WithSchema(activityServiceUploadActivitiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// activityServiceClient implements ActivityServiceClient.
type activityServiceClient struct {
	getActivities    *connect.Client[v1.GetActivitiesRequest, v1.GetActivitiesResponse]
	getActivity      *connect.Client[v1.GetActivityRequest, v1.GetActivityResponse]
	uploadActivities *connect.Client[v1.UploadActivitiesRequest, v1.UploadActivitiesResponse]
}

// GetActivities calls activity.v1.ActivityService.GetActivities.
func (c *activityServiceClient) GetActivities(ctx context.Context, req *connect.Request[v1.GetActivitiesRequest]) (*connect.Response[v1.GetActivitiesResponse], error) {
	return c.getActivities.CallUnary(ctx, req)
}

// GetActivity calls activity.v1.ActivityService.GetActivity.
func (c *activityServiceClient) GetActivity(ctx context.Context, req *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.GetActivityResponse], error) {
	return c.getActivity.CallUnary(ctx, req)
}

// UploadActivities calls activity.v1.ActivityService.UploadActivities.
func (c *activityServiceClient) UploadActivities(ctx context.Context) *connect.ClientStreamForClient[v1.UploadActivitiesRequest, v1.UploadActivitiesResponse] {
	return c.uploadActivities.CallClientStream(ctx)
}

// ActivityServiceHandler is an implementation of the activity.v1.ActivityService service.
type ActivityServiceHandler interface {
	// Fetch all activities without records.
	GetActivities(context.Context, *connect.Request[v1.GetActivitiesRequest]) (*connect.Response[v1.GetActivitiesResponse], error)
	// Fetch a single activity by ID with records.
	GetActivity(context.Context, *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.GetActivityResponse], error)
	// Upload multiple fit files
	UploadActivities(context.Context, *connect.ClientStream[v1.UploadActivitiesRequest]) (*connect.Response[v1.UploadActivitiesResponse], error)
}

// NewActivityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewActivityServiceHandler(svc ActivityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	activityServiceGetActivitiesHandler := connect.NewUnaryHandler(
		ActivityServiceGetActivitiesProcedure,
		svc.GetActivities,
		connect.WithSchema(activityServiceGetActivitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	activityServiceGetActivityHandler := connect.NewUnaryHandler(
		ActivityServiceGetActivityProcedure,
		svc.GetActivity,
		connect.WithSchema(activityServiceGetActivityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	activityServiceUploadActivitiesHandler := connect.NewClientStreamHandler(
		ActivityServiceUploadActivitiesProcedure,
		svc.UploadActivities,
		connect.WithSchema(activityServiceUploadActivitiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/activity.v1.ActivityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ActivityServiceGetActivitiesProcedure:
			activityServiceGetActivitiesHandler.ServeHTTP(w, r)
		case ActivityServiceGetActivityProcedure:
			activityServiceGetActivityHandler.ServeHTTP(w, r)
		case ActivityServiceUploadActivitiesProcedure:
			activityServiceUploadActivitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedActivityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedActivityServiceHandler struct{}

func (UnimplementedActivityServiceHandler) GetActivities(context.Context, *connect.Request[v1.GetActivitiesRequest]) (*connect.Response[v1.GetActivitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("activity.v1.ActivityService.GetActivities is not implemented"))
}

func (UnimplementedActivityServiceHandler) GetActivity(context.Context, *connect.Request[v1.GetActivityRequest]) (*connect.Response[v1.GetActivityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("activity.v1.ActivityService.GetActivity is not implemented"))
}

func (UnimplementedActivityServiceHandler) UploadActivities(context.Context, *connect.ClientStream[v1.UploadActivitiesRequest]) (*connect.Response[v1.UploadActivitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("activity.v1.ActivityService.UploadActivities is not implemented"))
}
