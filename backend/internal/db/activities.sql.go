// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: activities.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    user_id, 
    distance,
    activity_name,
    avg_speed,
    max_speed,
    elapsed_time,
    total_time,
    weather_impact,
    headwind,
    longest_headwind,
    air_speed,
    temp

) VALUES (
    $1, 
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12
)
RETURNING id
`

type CreateActivityParams struct {
	UserID          string
	Distance        pgtype.Numeric
	ActivityName    string
	AvgSpeed        pgtype.Numeric
	MaxSpeed        pgtype.Numeric
	ElapsedTime     pgtype.Time
	TotalTime       pgtype.Time
	WeatherImpact   pgtype.Numeric
	Headwind        int32
	LongestHeadwind pgtype.Time
	AirSpeed        pgtype.Numeric
	Temp            pgtype.Numeric
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (int32, error) {
	row := q.db.QueryRow(ctx, createActivity,
		arg.UserID,
		arg.Distance,
		arg.ActivityName,
		arg.AvgSpeed,
		arg.MaxSpeed,
		arg.ElapsedTime,
		arg.TotalTime,
		arg.WeatherImpact,
		arg.Headwind,
		arg.LongestHeadwind,
		arg.AirSpeed,
		arg.Temp,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getActivities = `-- name: GetActivities :many
SELECT id, created_at, user_id, distance, activity_name, avg_speed, max_speed, elapsed_time, total_time, weather_impact, headwind, longest_headwind, air_speed, temp FROM activities
`

func (q *Queries) GetActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.Query(ctx, getActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.Distance,
			&i.ActivityName,
			&i.AvgSpeed,
			&i.MaxSpeed,
			&i.ElapsedTime,
			&i.TotalTime,
			&i.WeatherImpact,
			&i.Headwind,
			&i.LongestHeadwind,
			&i.AirSpeed,
			&i.Temp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivity = `-- name: GetActivity :one
SELECT 
    a.id, a.created_at, a.user_id, a.distance, a.activity_name, a.avg_speed, a.max_speed, a.elapsed_time, a.total_time, a.weather_impact, a.headwind, a.longest_headwind, a.air_speed, a.temp,
    TO_CHAR(elapsed_time, 'HH24:MI:SS') as elapsed_time_char,
    TO_CHAR(total_time, 'HH24:MI:SS') as total_time_char
FROM activities a
WHERE id = $1 LIMIT 1
`

type GetActivityRow struct {
	ID              int32
	CreatedAt       pgtype.Timestamptz
	UserID          string
	Distance        pgtype.Numeric
	ActivityName    string
	AvgSpeed        pgtype.Numeric
	MaxSpeed        pgtype.Numeric
	ElapsedTime     pgtype.Time
	TotalTime       pgtype.Time
	WeatherImpact   pgtype.Numeric
	Headwind        int32
	LongestHeadwind pgtype.Time
	AirSpeed        pgtype.Numeric
	Temp            pgtype.Numeric
	ElapsedTimeChar string
	TotalTimeChar   string
}

func (q *Queries) GetActivity(ctx context.Context, id int32) (GetActivityRow, error) {
	row := q.db.QueryRow(ctx, getActivity, id)
	var i GetActivityRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Distance,
		&i.ActivityName,
		&i.AvgSpeed,
		&i.MaxSpeed,
		&i.ElapsedTime,
		&i.TotalTime,
		&i.WeatherImpact,
		&i.Headwind,
		&i.LongestHeadwind,
		&i.AirSpeed,
		&i.Temp,
		&i.ElapsedTimeChar,
		&i.TotalTimeChar,
	)
	return i, err
}

const getActivityWithRecordsView = `-- name: GetActivityWithRecordsView :one
SELECT id, created_at, user_id, distance, activity_name, avg_speed, max_speed, elapsed_time, total_time, elapsed_time_char, total_time_char, records
FROM activity_with_records_view
WHERE id = $1
`

func (q *Queries) GetActivityWithRecordsView(ctx context.Context, id int32) (ActivityWithRecordsView, error) {
	row := q.db.QueryRow(ctx, getActivityWithRecordsView, id)
	var i ActivityWithRecordsView
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.Distance,
		&i.ActivityName,
		&i.AvgSpeed,
		&i.MaxSpeed,
		&i.ElapsedTime,
		&i.TotalTime,
		&i.ElapsedTimeChar,
		&i.TotalTimeChar,
		&i.Records,
	)
	return i, err
}
