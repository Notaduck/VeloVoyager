version: "3"

vars:
  GOCMD: go
  YARNCMD: yarn
  BUFCMD: buf

tasks:
  build-backend:
    desc: "Build the Go project in the backend directory"
    cmds:
      - "cd backend && {{.GOCMD}} build -v ./..."

  run-backend:
    desc: "Run the Go project in the backend directory"
    cmds:
      - "cd backend && {{.GOCMD}} run -v ./..."

  test-backend:
    desc: "Run tests in the backend directory"
    cmds:
      - "cd backend && {{.GOCMD}} test ./..."

  debug-backend:
    desc: "Debug backend with hot-reloading using reflex and Delve"
    cmds:
      - |
        reflex -r '\.go$' -s -- \
        dlv debug ./backend/cmd/app/main.go \
        --headless --listen=:2345 --api-version=2 --accept-multiclient

  build-frontend:
    desc: "Build the frontend project"
    cmds:
      - "cd frontend && {{.YARNCMD}} install --frozen-lockfile"
      - "cd frontend && {{.YARNCMD}} build"

  run-frontend:
    desc: "Run the frontend project"
    cmds:
      - "cd frontend && {{.YARNCMD}} dev"

  start-all:
    desc: "Start both backend and frontend"
    cmds:
      - "task watch-backend &"
      - "task run-frontend"

  watch-backend:
    desc: "Watch Go files in the backend and rerun tasks"
    cmds:
      # - "cd backend && reflex -r '\\.go$' -s -- sh -c 'task test-backend && task build-backend && task run-backend'"
      - "cd backend && reflex -r '\\.go$' -s -- sh -c 'task build-backend && task run-backend'"
        # Add a watch task for frontend if needed, using your frontend technology's watch capabilities

  lint-frontend:
    desc: "Run the frontend lint suite"
    cmds:
      - "cd frontend && {{.YARNCMD}} lint"

  generate-proto:
    desc: "Regenerate Go and TypeScript clients from protobuf definitions"
    cmds:
      - "{{.BUFCMD}} generate"

  db-migrate:
    desc: "Apply database migrations using golang-migrate"
    cmds:
      - |
        if [ -z "{{ .DB_CONNECTION_STRING | default .DB_URL }}" ]; then \
          echo "DB_CONNECTION_STRING environment variable is required"; \
          exit 1; \
        fi
      - "cd backend && migrate -path misc/migrations -database \"{{ .DB_CONNECTION_STRING | default .DB_URL }}\" up"

  sqlc-generate:
    desc: "Run database migrations and regenerate sqlc code"
    deps:
      - db-migrate
    cmds:
      - "cd backend && sqlc generate"
